import React, { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase";
import { Link } from "react-router-dom";

import PasswordCell from "@/pages/admin/components/PasswordCell";
type RoleRow = {
  id: string;           // auth.users.id (FK)
  email: string;
  role: "admin" | "user" | string;
  is_active: boolean;
  created_at: string | null;
};

function toHST(iso: string | null) {
  if (!iso) return "—";
  const d = new Date(iso);
  if (isNaN(d.getTime())) return "—";
  return d.toLocaleString("en-US", { timeZone: "Pacific/Honolulu" });
}

export default function AdminRolesPage() {
  const [rows, setRows] = useState<RoleRow[]>([]);
  const [loading, setLoading] = useState(true);
  const [busyId, setBusyId] = useState<string | null>(null);
  const [selfId, setSelfId] = useState<string | undefined>();
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let mounted = true;
    supabase.auth.getUser().then(({ data }) => {
      if (mounted) setSelfId(data.user?.id);
    });
    (async () => {
      setLoading(true);
      setError(null);
      const { data, error } = await supabase
        .from("profiles")
        .select("id,email,role,is_active,created_at")
        .order("created_at", { ascending: true });
      if (error) {
        console.error("[AdminRoles] load error", error);
        setError(error.message);
      } else {
        setRows((data as any) ?? []);
      }
      setLoading(false);
    })();
    return () => { mounted = false; };
  }, []);

  async function setRole(id: string, role: RoleRow["role"]) {
    setBusyId(id);
    const { error } = await supabase.from("profiles").update({ role }).eq("id", id);
    setBusyId(null);
    if (error) return alert(error.message);
    setRows((prev) => prev.map((r) => (r.id === id ? { ...r, role } : r)));
  }

  async function setActive(id: string, is_active: boolean) {
    setBusyId(id);
    const { error } = await supabase.from("profiles").update({ is_active }).eq("id", id);
    setBusyId(null);
    if (error) return alert(error.message);
    setRows((prev) => prev.map((r) => (r.id === id ? { ...r, is_active } : r)));
  }

  async function deleteRow(row: RoleRow) {
    if (row.id === selfId) {
      alert("You cannot delete your own admin record.");
      return;
    }
    if (!confirm(`Delete role record for ${row.email}? This removes it from the roles table only.`)) return;
    setBusyId(row.id);
    const { error } = await supabase.from("profiles").delete().eq("id", row.id);
    setBusyId(null);
    if (error) return alert(error.message);
    setRows((prev) => prev.filter((r) => r.id !== row.id));
  }

  return (
    <div className="p-6">
      <div className="mb-4 flex items-center justify-between">
        <h1 className="text-2xl font-semibold">Admin Roles</h1>
        <Link to="/admin/users-invite" className="text-sky-700 hover:underline">
          Invite Users
        </Link>
      </div>

      {loading && <div className="text-gray-600">Loading…</div>}
      {error && <div className="text-red-600 mb-3">{error}</div>}

      {!loading && rows.length === 0 && (
        <div className="text-gray-600">No users found.</div>
      )}

      {!loading && rows.length > 0 && (
        <div className="overflow-x-auto border rounded">
          <table className="min-w-full border-collapse">
            <thead className="bg-gray-50">
              <tr className="text-left text-sm text-gray-600">
                <th className="p-3 border-b">Email</th>
                <th className="p-3 border-b">Role</th>
                <th className="p-3 border-b">Active</th>
                <th className="p-3 border-b">Created</th>
                <th className="p-3 border-b">User ID</th>
                <th className="px-3 py-2 text-left text-sm font-medium text-gray-700">Password</th>
      <th className="p-3 border-b text-right">Actions</th>
              </tr>
            </thead>
            <tbody>
              {rows.map((r) => (
                <tr key={r.id} className="text-sm">
                  <td className="px-3 py-2 align-top">
        <PasswordCell userId={String(u.user_id ?? u.id)} email={u.email} />
      </td>
      <td className="p-3 border-b align-middle">{r.email}</td>
                  <td className="p-3 border-b align-middle">
                    <select
                      className="border rounded px-2 py-1"
                      value={r.role}
                      disabled={busyId === r.id}
                      onChange={(e) => setRole(r.id, e.target.value as RoleRow["role"])}
                    >
                      <option value="user">user</option>
                      <option value="admin">admin</option>
                    </select>
                  </td>
                  <td className="p-3 border-b align-middle">
                    <input
                      type="checkbox"
                      className="h-4 w-4"
                      checked={!!r.is_active}
                      disabled={busyId === r.id}
                      onChange={(e) => setActive(r.id, e.target.checked)}
                    />
                  </td>
                  <td className="p-3 border-b align-middle">{toHST(r.created_at)}</td>
                  <td className="p-3 border-b align-middle">{r.id}</td>
                  <td className="p-3 border-b align-middle">
                    <div className="flex justify-end gap-2">
                      <button
                        className="px-3 py-1 rounded border border-red-600 text-red-700 hover:bg-red-50 disabled:opacity-60"
                        disabled={busyId === r.id}
                        onClick={() => deleteRow(r)}
                      >
                        Delete
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}
