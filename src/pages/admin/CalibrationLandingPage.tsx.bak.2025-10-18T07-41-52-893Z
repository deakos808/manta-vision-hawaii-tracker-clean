import { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import Layout from "@/components/layout/Layout";
import { supabase } from "@/lib/supabaseClient";
import { Pencil, Trash2 } from "lucide-react";

type Row = {
  session_id: string;
  n_measurements: number | null;   // rows in calibration_measurements
  mean_error_pct: number | null;   // from view
  photographer_name?: string | null;
  camera_model?: string | null;
  laser_setup?: string | null;
  created_at?: string | null;
};

export default function CalibrationLandingPage(){
  const navigate = useNavigate();
  const [rows, setRows] = useState<Row[]>([]);
  const [photosCount, setPhotosCount] = useState<Record<string, number>>({});
  const [loading, setLoading] = useState(false);

  useEffect(()=>{ (async ()=>{
    setLoading(true);
    try{
      // Stats view
      const { data: stats, error: e1 } = await supabase
        .from("calibration_session_stats")
        .select("*");
      if (e1) throw e1;

      // Headers (names/model/laser/timestamp)
      const { data: heads, error: e2 } = await supabase
        .from("calibration_sessions")
        .select("id, photographer_name, camera_model, laser_setup, created_at");
      if (e2) throw e2;

      // Build photos count map
      const ids = (heads || []).map(h => h.id);
      const countMap: Record<string, number> = {};
      if (ids.length) {
        const { data: ph, error: e3 } = await supabase
          .from("calibration_photos")
          .select("id, session_id")
          .in("session_id", ids);
        if (e3) throw e3;
        for (const p of (ph || [])) {
          countMap[p.session_id] = (countMap[p.session_id] || 0) + 1;
        }
      }
      setPhotosCount(countMap);

      const hmap = new Map((heads || []).map(h => [h.id, h]));
      const merged: Row[] = (stats || []).map(s => ({
        session_id: s.session_id,
        n_measurements: s.n_measurements,
        mean_error_pct: s.mean_error_pct,
        photographer_name: hmap.get(s.session_id)?.photographer_name ?? null,
        camera_model:     hmap.get(s.session_id)?.camera_model ?? null,
        laser_setup:      hmap.get(s.session_id)?.laser_setup ?? null,
        created_at:       hmap.get(s.session_id)?.created_at ?? null,
      })).sort((a,b)=> (b.created_at || "").localeCompare(a.created_at || ""));
      setRows(merged);
    } finally {
      setLoading(false);
    }
  })(); },[]);

  async function deleteSession(sessionId: string){
    try{
      const base = `calibration/${sessionId}`;
      const { data:list } = await supabase.storage.from("calibration-images").list(base, { limit: 100 });
      if (list && list.length){
        const paths = list.map(it => `${base}/${it.name}`);
        await supabase.storage.from("calibration-images").remove(paths);
      }
      const { error: delErr } = await supabase
        .from("calibration_sessions")
        .delete()
        .eq("id", sessionId);
      if (delErr) throw delErr;
      setRows(prev => prev.filter(r => r.session_id !== sessionId));
    } catch (e:any) {
      console.error("[calibration] deleteSession", e);
      alert("Delete failed: " + (e?.message || e));
    }
  }

  return (
    <Layout>
      <div className="min-h-full">
      {/* Hero */}
      <div className="w-full bg-gradient-to-r from-blue-600 to-blue-500 text-white py-10 px-4">
        <div className="max-w-6xl mx-auto text-center">
          <h1 className="text-3xl sm:text-4xl font-bold">Calibration Sessions</h1>
        </div>
      </div>

      {/* Breadcrumb (below hero) */}
      <div className="max-w-6xl mx-auto px-4 py-2">
        <a href="/admin" className="text-sm text-blue-700 underline">Admin</a>
        <span className="text-sm text-slate-600"> / Calibration</span>
      </div>

      {/* Body */}
      <div className="max-w-6xl mx-auto p-6">
        <div className="mb-4">
          <p className="text-sm text-slate-600">Mean error is computed across photos with measurements.</p>
        </div>

        <div className="mb-4">
          <Link to="/admin/calibration/new" className="inline-flex items-center rounded-md border px-3 py-2 text-sm font-medium hover:bg-slate-50">
            New Calibration
          </Link>
        </div>

        <div className="overflow-x-auto border rounded-lg bg-white">
          <table className="min-w-full text-sm">
            <thead className="bg-slate-50 text-slate-600">
              <tr>
                <th className="text-left   px-3 py-2">Created</th>
                <th className="text-center px-3 py-2">Photographer</th>
                <th className="text-center px-3 py-2">Camera</th>
                <th className="text-center px-3 py-2">Laser setup</th>
                <th className="text-center px-3 py-2">Photos</th>
                <th className="text-center px-3 py-2">Mean error (%)</th>
                <th className="text-center px-3 py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {rows.map(r => (
                <tr key={r.session_id} className="border-t">
                  <td className="px-3 py-2">{r.created_at ? new Date(r.created_at).toLocaleString() : "-"}</td>
                  <td className="px-3 py-2 text-center">{r.photographer_name || "-"}</td>
                  <td className="px-3 py-2 text-center">{r.camera_model || "-"}</td>
                  <td className="px-3 py-2 text-center">{r.laser_setup || "-"}</td>
                  <td className="px-3 py-2 text-center">{photosCount[r.session_id] ?? 0}</td>
                  <td className="px-3 py-2 text-center">{r.mean_error_pct != null ? r.mean_error_pct.toFixed(2) : "-"}</td>
                  <td className="px-3 py-2 text-center">
                    <button
                      type="button"
                      className="inline-flex items-center gap-1 px-2 py-1 rounded-md border hover:bg-slate-50 mr-2"
                      onClick={() => navigate(`/admin/calibration/${r.session_id}`)}
                      aria-label="Edit session"
                      title="Edit"
                    >
                      <Pencil className="w-4 h-4" />
                      <span className="sr-only">Edit</span>
                    </button>
                    <button
                      type="button"
                      className="inline-flex items-center gap-1 px-2 py-1 rounded-md border hover:bg-slate-50 text-rose-700"
                      onClick={() => { if (confirm("Delete this calibration session? This will remove its photos/measurements.")) deleteSession(r.session_id); }}
                      aria-label="Delete session"
                      title="Delete"
                    >
                      <Trash2 className="w-4 h-4" />
                      <span className="sr-only">Delete</span>
                    </button>
                  </td>
                </tr>
              ))}
              {(!rows.length && !loading) && (
                <tr>
                  <td className="px-3 py-6 text-center text-slate-500" colSpan={7}>No sessions yet.</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
