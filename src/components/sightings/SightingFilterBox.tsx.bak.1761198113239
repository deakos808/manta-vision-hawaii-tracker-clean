// File: src/components/sightings/SightingFilterBox.tsx
import { useEffect, useMemo, useState } from "react";
import { supabase } from "@/lib/supabase";
import { Button } from "@/components/ui/button";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";

type CountRow = { value: string; count: number };

const POP_ISLANDS: Record<string, string[]> = {
  "Maui Nui": ["Maui", "Molokai", "Lanai", "Kahoolawe"],
  "Oahu": ["Oahu"],
  "Kauai": ["Kauai", "Niihau"],
  "Big Island": ["Big Island", "Hawaii", "Hawaiʻi"],
};

interface Props {
  island: string; setIsland: (v: string) => void;
  photographer: string; setPhotographer: (v: string) => void;
  location: string; setLocation: (v: string) => void;
  population: string; setPopulation: (v: string) => void;
  minMantas: number | ""; setMinMantas: (v: number | "") => void;
  date: string; setDate: (v: string) => void;
  onClear: () => void;
  isAdmin?: boolean;
}

type Filters = Pick<Props, "population" | "island" | "location" | "photographer" | "minMantas" | "date">;

// Row predicate identical to the list
function rowMatch(r: any, f: Filters): boolean {
  const pop = (r.population ?? "").toString();
  const isl = (r.island ?? "").toString();
  const loc = (r.sitelocation ?? "").toString();
  const phot = (r.photographer ?? "").toString();
  const tm = Number(r.total_mantas ?? 0);
  const dt = (r.sighting_date ?? "").toString();
  if (f.population && !pop.toLowerCase().includes(f.population.toLowerCase())) return false;
  if (f.island && f.island !== "all" && !isl.toLowerCase().includes(f.island.toLowerCase())) return false;
  if (f.location && loc !== f.location) return false;
  if (f.photographer && !phot.toLowerCase().includes(f.photographer.toLowerCase())) return false;
  if (f.minMantas !== "" && !(tm >= Number(f.minMantas))) return false;
  if (f.date && dt !== f.date) return false;
  return true;
}

export default function SightingFilterBox({
  island, setIsland,
  photographer, setPhotographer,
  location, setLocation,
  population, setPopulation,
  minMantas, setMinMantas,
  date, setDate,
  onClear,
  isAdmin = false,
}: Props) {

  const filters: Filters = { population, island, location, photographer, minMantas, date };

  // 1) fetch current found set rows under current filters (no pagination)
  const [rows, setRows] = useState<any[]>([]);
  useEffect(() => {
    let alive = true;
    (async () => {
      let q = supabase
        .from("sightings")
        .select("population,island,sitelocation,photographer,total_mantas,sighting_date")
        ;

      if (population) q = q.ilike("population", `%${population}%`);
      if (island && island !== "all") q = q.ilike("island", `%${island}%`);
      if (location) q = q.eq("sitelocation", location);
      if (photographer) q = q.ilike("photographer", `%${photographer}%`);
      if (minMantas !== "") q = q.gte("total_mantas", minMantas as any);
      if (date) q = q.eq("sighting_date", date);
      q = q.limit(100000);

      const { data, error } = await q;
      if (!alive) return;
      if (error) { console.error("[filters] fetch error", error); setRows([]); }
      else setRows(data ?? []);
    })();
    return () => { alive = false; };
  }, [population, island, location, photographer, minMantas, date]);

  // 2) distinct values in current found set
  const values = useMemo(() => {
    const P = new Set<string>(), I = new Set<string>(), L = new Set<string>(), H = new Set<string>();
    for (const r of rows) {
      const p = (r.population ?? "").toString().trim();
      const i = (r.island ?? "").toString().trim();
      const l = (r.sitelocation ?? "").toString().trim();
      const h = (r.photographer ?? "").toString().trim();
      if (p) P.add(p); if (i) I.add(i); if (l) L.add(l); if (h) H.add(h);
    }
    return {
      populations: [...P].sort((a,b)=>a.localeCompare(b)),
      islands:     [...I].sort((a,b)=>a.localeCompare(b)),
      locations:   [...L].sort((a,b)=>a.localeCompare(b)),
      photographers: [...H].sort((a,b)=>a.localeCompare(b)),
    };
  }, [rows]);

  // 3) cascade lists
  const cascadedIslands = useMemo(() => {
    if (!population) return values.islands;
    const allowed = POP_ISLANDS[population] ?? [];
    return values.islands.filter(v => allowed.includes(v));
  }, [values.islands, population]);

  const cascadedLocations = useMemo(() => {
    if (!island || island === "all") return values.locations;
    return values.locations.filter(v =>
      rows.some(r => (r.island ?? "").toString().toLowerCase().includes(island.toLowerCase()) && (r.sitelocation ?? "").toString() === v)
    );
  }, [values.locations, island, rows]);

  // 4) option-specific "what-if" counts: apply the option on top of current filters
  const countIf = (next: Partial<Filters>) =>
    rows.reduce((acc, r) => acc + (rowMatch(r, { ...filters, ...next }) ? 1 : 0), 0);

  const popRows: CountRow[] = useMemo(
    () => values.populations.map(v => ({ value: v, count: countIf({ population: v }) })),
    [values.populations, rows, population, island, location, photographer, minMantas, date]
  );
  const islRows: CountRow[] = useMemo(
    () => cascadedIslands.map(v => ({ value: v, count: countIf({ island: v }) })),
    [cascadedIslands, rows, population, island, location, photographer, minMantas, date]
  );
  const locRows: CountRow[] = useMemo(
    () => cascadedLocations.map(v => ({ value: v, count: countIf({ location: v }) })),
    [cascadedLocations, rows, population, island, location, photographer, minMantas, date]
  );
  const phoRows: CountRow[] = useMemo(
    () => values.photographers.map(v => ({ value: v, count: countIf({ photographer: v }) })),
    [values.photographers, rows, population, island, location, photographer, minMantas, date]
  );

  // 5) UI helpers
  const Pill = ({ label, active, children }:{
    label: string; active: boolean; children: React.ReactNode;
  }) => (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" className={`text-sm ${active ? "border-blue-600 text-blue-600" : ""}`}>
          {label}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-64 p-3 space-y-2" align="start">
        {children}
      </PopoverContent>
    </Popover>
  );

  const RadioList = (current: string, setCurrent:(v:string)=>void, rows: CountRow[]) =>
    rows.map((r) => (
      <label key={r.value} className="flex items-center justify-between gap-2 rounded px-2 py-1 hover:bg-muted/50 text-sm cursor-pointer">
        <div className="flex items-center gap-2">
          <Checkbox
            checked={current === r.value}
            onCheckedChange={() => setCurrent(r.value === current ? "" : r.value)}
          />
          {r.value}
        </div>
        <span className="text-xs text-muted-foreground">{r.count}</span>
      </label>
    ));

  // 6) UI
  return (
    <div className="bg-white shadow p-4 rounded border">
      <div className="flex justify-between items-center mb-3">
        <div className="text-sm font-medium">Filter Sighting Records by:</div>
        <Button variant="link" size="sm" onClick={onClear}>Clear All Filters</Button>
      </div>

      <div className="flex flex-wrap gap-2">
        {/* Date */}
        <Pill label={`Date${date ? `: ${date}` : ""}`} active={!!date}>
          <Input type="date" value={date} onChange={(e)=>setDate(e.target.value)} />
          {date && <Button size="sm" className="mt-2" onClick={()=>setDate("")}>Clear</Button>}
        </Pill>

        {/* Population */}
        <Pill label={`Population${population ? `: ${population}` : ""}`} active={!!population}>
          {RadioList(population, setPopulation, popRows)}
        </Pill>

        {/* Island */}
        <Pill label={`Island${island && island !== "all" ? `: ${island}` : ""}`} active={!!island && island !== "all"}>
          {RadioList(island, setIsland, islRows)}
        </Pill>

        {/* Location */}
        <Pill label={`Location${location ? `: ${location}` : ""}`} active={!!location}>
          {RadioList(location, setLocation, locRows)}
        </Pill>

        {/* Photographer — admin only */}
        {isAdmin && (
          <Pill label={`Photographer${photographer ? `: ${photographer}` : ""}`} active={!!photographer}>
            {RadioList(photographer, setPhotographer, phoRows)}
          </Pill>
        )}

        {/* ≥ Mantas */}
        <Pill label={minMantas === "" ? "≥ Mantas" : `≥ ${minMantas}`} active={minMantas !== ""}>
          <Input
            type="number"
            min={0}
            value={minMantas}
            onChange={(e)=> setMinMantas(e.target.value === "" ? "" : Number(e.target.value))}
          />
          {minMantas !== "" && <Button size="sm" className="mt-2" onClick={()=>setMinMantas("")}>Clear</Button>}
        </Pill>
      </div>
    </div>
  );
}
