// File: src/components/sightings/SightingFilterBox.tsx
import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase";
import { Button } from "@/components/ui/button";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";

type CountRow = { value: string; count: number };

interface Props {
  island: string; setIsland: (v: string) => void;
  photographer: string; setPhotographer: (v: string) => void;
  location: string; setLocation: (v: string) => void;
  population: string; setPopulation: (v: string) => void;
  minMantas: number | ""; setMinMantas: (v: number | "") => void;
  date: string; setDate: (v: string) => void;
  onClear: () => void;
  isAdmin?: boolean;
}

function edgeBase() {
  const e = import.meta.env.VITE_SUPABASE_EDGE_URL?.replace(/\/$/, "");
  if (e) return e;
  const u = (import.meta.env.VITE_SUPABASE_URL || "").replace(/\/$/, "");
  return u ? `${u}/functions/v1` : "https://apweteosdbgsolmvcmhn.supabase.co/functions/v1";
}

export default function SightingFilterBox({
  island, setIsland,
  photographer, setPhotographer,
  location, setLocation,
  population, setPopulation,
  minMantas, setMinMantas,
  date, setDate,
  onClear,
  isAdmin = false,
}: Props) {
  const [populations, setPopulations] = useState<CountRow[]>([]);
  const [islands, setIslands]       = useState<CountRow[]>([]);
  const [locations, setLocations]   = useState<CountRow[]>([]);
  const [photographers, setPhotographers] = useState<CountRow[]>([]);

  // --- fetch server-side facets for population / island / location (option-specific counts) ---
  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        const base = edgeBase();
        const body = JSON.stringify({
          population, island, location, photographer, minMantas, date
        });
        const r = await fetch(`${base}/facet-sightings`, {
        method: "POST",
        mode: "cors",
        headers: {
          "Content-Type": "application/json",
          // pass a benign header so some gateways don't strip it
          "Authorization": "Anon"
        },
        body
      });const j = await r.json().catch(() => ({}));
        if (!alive) return;
        if (!r.ok) { console.error("[facet-sightings] error", j); return; }
        setPopulations(Array.isArray(j.populations) ? j.populations : []);
        setIslands(Array.isArray(j.islands) ? j.islands : []);
        setLocations(Array.isArray(j.locations) ? j.locations : []);
      } catch (e) {
        if (alive) console.error("[facet-sightings] fetch failed", e);
      }
    })();
    return () => { alive = false; };
  }, [population, island, location, photographer, minMantas, date]);

  // --- fetch photographers (admin only) under current filters (client-side tally) ---
  useEffect(() => {
    if (!isAdmin) { setPhotographers([]); return; }
    let alive = true;
    (async () => {
      try {
        let q = supabase.from("sightings")
          .select("photographer,total_mantas,sighting_date,island,sitelocation,population")
          .not("photographer","is", null);
        if (population) q = q.ilike("population", `%${population}%`);
        if (island && island !== "all") q = q.ilike("island", `%${island}%`);
        if (location) q = q.eq("sitelocation", location);
        if (photographer) q = q.ilike("photographer", `%${photographer}%`);
        if (minMantas !== "") q = q.gte("total_mantas", minMantas as any);
        if (date) q = q.eq("sighting_date", date);
        q = q.limit(50000);

        const { data, error } = await q;
        if (!alive) return;
        if (error) { console.error("[photographers] error", error); setPhotographers([]); return; }
        const map = new Map<string, number>();
        for (const r of data ?? []) {
          const ph = (r.photographer ?? "").toString().trim();
          if (!ph) continue;
          map.set(ph, (map.get(ph) ?? 0) + 1);
        }
        setPhotographers([...map].map(([value,count])=>({ value, count })).sort((a,b)=>a.value.localeCompare(b.value)));
      } catch (e) {
        if (alive) console.error("[photographers] fetch failed", e);
      }
    })();
    return () => { alive = false; };
  }, [population, island, location, photographer, minMantas, date, isAdmin]);

  // --- UI helpers ---
  const Pill = ({ label, active, children }:{
    label: string; active: boolean; children: React.ReactNode;
  }) => (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" className={`text-sm ${active ? "border-blue-600 text-blue-600" : ""}`}>
          {label}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-64 p-3 space-y-2" align="start">
        {children}
      </PopoverContent>
    </Popover>
  );

  const RadioList = (current: string, setCurrent:(v:string)=>void, rows: CountRow[]) =>
    rows.map((r) => (
      <label key={r.value} className="flex items-center justify-between gap-2 rounded px-2 py-1 hover:bg-muted/50 text-sm cursor-pointer">
        <div className="flex items-center gap-2">
          <Checkbox
            checked={current === r.value}
            onCheckedChange={() => setCurrent(r.value === current ? "" : r.value)}
          />
          {r.value}
        </div>
        <span className="text-xs text-muted-foreground">{r.count}</span>
      </label>
    ));

  return (
    <div className="bg-white shadow p-4 rounded border">
      <div className="flex justify-between items-center mb-3">
        <div className="text-sm font-medium">Filter Sighting Records by:</div>
        <Button variant="link" size="sm" onClick={onClear}>Clear All Filters</Button>
      </div>

      <div className="flex flex-wrap gap-2">
        {/* Date */}
        <Pill label={`Date${date ? `: ${date}` : ""}`} active={!!date}>
          <Input type="date" value={date} onChange={(e)=>setDate(e.target.value)} />
          {date && <Button size="sm" className="mt-2" onClick={()=>setDate("")}>Clear</Button>}
        </Pill>

        {/* Population */}
        <Pill label={`Population${population ? `: ${population}` : ""}`} active={!!population}>
          {RadioList(population, setPopulation, populations)}
        </Pill>

        {/* Island */}
        <Pill label={`Island${island && island !== "all" ? `: ${island}` : ""}`} active={!!island && island !== "all"}>
          {RadioList(island, setIsland, islands)}
        </Pill>

        {/* Location */}
        <Pill label={`Location${location ? `: ${location}` : ""}`} active={!!location}>
          {RadioList(location, setLocation, locations)}
        </Pill>

        {/* Photographer — admin only */}
        {isAdmin && (
          <Pill label={`Photographer${photographer ? `: ${photographer}` : ""}`} active={!!photographer}>
            {RadioList(photographer, setPhotographer, photographers)}
          </Pill>
        )}

        {/* ≥ Mantas */}
        <Pill label={minMantas === "" ? "≥ Mantas" : `≥ ${minMantas}`} active={minMantas !== ""}>
          <Input
            type="number"
            min={0}
            value={minMantas}
            onChange={(e)=> setMinMantas(e.target.value === "" ? "" : Number(e.target.value))}
          />
          {minMantas !== "" && <Button size="sm" className="mt-2" onClick={()=>setMinMantas("")}>Clear</Button>}
        </Pill>
      </div>
    </div>
  );
}
