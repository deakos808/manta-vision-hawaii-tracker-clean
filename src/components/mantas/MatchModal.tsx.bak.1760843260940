import React, { useEffect, useMemo, useState } from 'react';
import { supabase } from '@/lib/supabase';
import CatalogFilterBox, { type FiltersState } from '@/components/catalog/CatalogFilterBox';

function normStr(v?: string | null): string {

  // Jump to a provided start catalog id (set by list before opening the modal).
  function idxByCatalogId(list:any[], id:any){
    const target = Number(id);
    if (!Array.isArray(list) || !Number.isFinite(target)) return -1;
    const keys = ['pk_catalog_id','pk_catalog','catalog_id','id'];
    return list.findIndex((r:any) => keys.some(k => Number((r||{})[k]) === target));
  }
  React.useEffect(() => {
    const start = (typeof window!=='undefined' && (window as any).__matchStartCatalogId) ?? null;
    if (!start) return;
    const list:any[] = rows;
    const i = idxByCatalogId(list, start);
    if (i >= 0) { setIdx(i); }
  }, [rows]);
  return (v ?? "").toString().normalize("NFC").trim().toLowerCase();
}
function arrHas(active: string[], arr?: (string | null)[] | null, single?: string | null) {
  if (active.length === 0) return true;
  const want = active.map(normStr);
  if (arr && arr.length) {
    const hay = arr.map(normStr);
    return hay.some(x => x && want.includes(x));
  }
  if (single) return want.includes(normStr(single));
  return false;
}



type CatalogRow = {
  pk_catalog_id: number;
  name: string | null;
  species?: string | null;
  gender?: string | null;
  age_class?: string | null;
  population?: string | null;
  island?: string | null;
  sitelocation?: string | null;
  best_catalog_ventral_thumb_url?: string | null;
  best_catalog_ventral_path?: string | null;
  thumbnail_url?: string | null;
  populations?: string[] | null;
  islands?: string[] | null;
  locations?: string[] | null;
};

type Meta = { name?: string|null; gender?: string|null; ageClass?: string|null; meanSize?: number|null };

interface Props {
  open: boolean;
  onClose: () => void;
  tempUrl?: string | null;
  aMeta?: Meta;
  onChoose?: (catalogId: number) => void;
  onNoMatch?: () => void;
}

const EMPTY_FILTERS: FiltersState = {
  population: [],
  island: [],
  sitelocation: [],
  gender: [],
  age_class: [],
  species: [],
};

function imgFromRow(r?: CatalogRow): string {
  if (!r) return '/manta-logo.svg';
  return r.best_catalog_ventral_thumb_url || r.best_catalog_ventral_path || r.thumbnail_url || '/manta-logo.svg';
}


const TOOLBAR_H = 300;
const IMG_BOX_H = 420;

const MatchModal: React.FC<Props> = ({ open, onClose, tempUrl, aMeta, onChoose, onNoMatch }) => {
  const [leftSrc, setLeftSrc] = useState<string | null>(tempUrl ?? null);
  useEffect(() => {
    if (open) {
      if (tempUrl) setLeftSrc(tempUrl);
    } else {
      setLeftSrc(null);
    }
  }, [open, tempUrl]);

  const safeClose = () => { try { onClose(); } catch { /* noop */ } };

  const [rows, setRows] = useState<CatalogRow[]>([]);
  const [loading, setLoading] = useState(false);
  const [search, setSearch] = useState('');
  const [filters, setFilters] = useState<FiltersState>(EMPTY_FILTERS);
  const [sortAsc, setSortAsc] = useState(true);
  const [idx, setIdx] = useState(0);
  const filteredSummaryClean = useMemo(() => {
    const parts:string[]=[];
    if (filters.species.length) parts.push(filters.species.join(', '));
    if (filters.population.length) parts.push(filters.population.join(', '));
    if (filters.island.length) parts.push(filters.island.join(', '));
    if (filters.sitelocation.length) parts.push(filters.sitelocation.join(', '));
    if (filters.gender.length) parts.push(filters.gender.join(', '));
    if (filters.age_class.length) parts.push(filters.age_class.join(', '));
    if (!parts.length) return '';
    return parts.join(' • ');
  }, [filters]);
const filteredSummary = useMemo(() => {
    const parts:string[]=[];
    if (filters.species.length) parts.push('species: ' + filters.species.join(', '));
    if (filters.population.length) parts.push('population: ' + filters.population.join(', '));
    if (filters.island.length) parts.push('island: ' + filters.island.join(', '));
    if (filters.sitelocation.length) parts.push('location: ' + filters.sitelocation.join(', '));
    if (filters.gender.length) parts.push('gender: ' + filters.gender.join(', '));
    if (filters.age_class.length) parts.push('age: ' + filters.age_class.join(', '));
    return parts.join(' • ');
  }, [filters]);

  useEffect(() => {
    if (!open) return;
    let cancelled = false;
    (async () => {
      setLoading(true);
      const { data, error } = await supabase.from('catalog_with_photo_view').select('*');
      if (!cancelled) {
        if (error) setRows([]);
        else setRows((data as unknown as CatalogRow[]) ?? []);
        setLoading(false);
        setIdx(0);
      }
    })();
    return () => { cancelled = true; };
  }, [open]);

  const filtered = useMemo(() => {
    const s = search.trim().toLowerCase();
    const matchesList = (list: string[], v?: string | null) => list.length === 0 || (v ? list.includes(v) : false);
    const base = rows.filter((c) => {
  const nm = normStr(c.name);
  const byText = (nm ? nm.includes(s) : false) || String(c.pk_catalog_id).includes(s);

  const byFilters =
    arrHas(filters.population, c.populations ?? null, c.population ?? null) &&
    arrHas(filters.island,     c.islands     ?? null, c.island     ?? null) &&
    arrHas(filters.sitelocation, c.locations ?? null, c.sitelocation ?? null) &&
    arrHas(filters.gender,    null, c.gender ?? null) &&
    arrHas(filters.age_class, null, c.age_class ?? null);

  const speciesOk = filters.species.length === 0 ||
    (c.species ? filters.species.map(normStr).includes(normStr(c.species)) : false);

  return byText && byFilters && speciesOk;
});
return base.sort((a, b) => (sortAsc ? a.pk_catalog_id - b.pk_catalog_id : b.pk_catalog_id - a.pk_catalog_id));
}, [rows, search, filters, sortAsc]);useEffect(() => {
    setIdx((i) => (filtered.length ? Math.min(i, filtered.length - 1) : 0));
  }, [filtered.length]);

  if (!open) return null;
  const current = filtered[idx];

  return (
    <div className="fixed inset-0 z-50 flex items-start justify-center p-4">
      <div className="absolute inset-0 bg-black/50" onClick={(()=>{ try{ onClose && onClose(); }catch{} })} />
      <div className="relative bg-white w-[min(1280px,96vw)] max-h-[92vh] rounded shadow overflow-hidden">
        <div className="flex items-center justify-between px-4 py-3 border-b">
          <div className="text-lg font-semibold">Find Catalog Match</div>
          <button type="button" className="h-8 w-8 grid place-items-center rounded hover:bg-gray-100" onClick={(()=>{ try{ onClose && onClose(); }catch{} })} aria-label="Close">×</button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 p-3 max-h-[calc(92vh-56px)] overflow-auto">
          <div className="border rounded p-3 bg-white" style={{ paddingTop: TOOLBAR_H }}>
            <div className="text-sm font-medium mb-2">Best ventral (temp)</div>
            <div className="w-full rounded bg-gray-50 grid place-items-center" style={{ height: IMG_BOX_H }}>
              <img
                src={leftSrc || '/manta-logo.svg'}
                alt="temp"
                className="max-w-full max-h-full object-contain"
                referrerPolicy="no-referrer"
                crossOrigin="anonymous"
                onError={(e) => { (e.currentTarget as HTMLImageElement).src = '/manta-logo.svg'; }}
              />
            </div>
            <div className="mt-3 text-xs text-gray-600 space-y-1">
              <div>Temp name: {aMeta?.name ?? '—'}</div>
              <div>Gender: {aMeta?.gender ?? '—'}</div>
              <div>Age class: {aMeta?.ageClass ?? '—'}</div>
              <div>Mean size: {aMeta?.meanSize != null ? `${aMeta.meanSize} cm` : '—'}</div>
            </div>
          </div>

          <div className="border rounded p-3 bg-white flex flex-col">
            <div style={{ height: TOOLBAR_H, overflow: 'auto' }}>
              <input
                className="border rounded px-3 py-2 text-sm w-full mb-2"
                placeholder="Search by Catalog ID or name…"
                value={search}
                onChange={(e) => { setSearch(e.target.value); setIdx(0); }}
              />
              <div className="scale-[0.95] origin-top-left"><CatalogFilterBox
                catalog={rows}
                filters={filters}
                setFilters={(f) => { setFilters(f); setIdx(0); }}
                sortAsc={sortAsc}
                setSortAsc={setSortAsc}
                onClearAll={() => { setSearch(''); setFilters(EMPTY_FILTERS); setSortAsc(true); setIdx(0); }}
              /></div>
              <div className="text-xs text-gray-600 mt-2">
  {filtered.length ? `${idx + 1} of ${filtered.length} total` : "0 of 0 total"}{filteredSummaryClean ? ` (filtered by: ${filteredSummaryClean})` : ""}
</div>
            </div>

            <div className="mt-3 w-full rounded bg-gray-50 grid place-items-center" style={{ height: IMG_BOX_H }}>
              <img
                src={imgFromRow(current)}
                alt={current?.name ?? 'catalog'}
                className="max-w-full max-h-full object-contain"
                referrerPolicy="no-referrer"
                crossOrigin="anonymous"
                onError={(e) => { (e.currentTarget as HTMLImageElement).src = '/manta-logo.svg'; }}
              />
            </div>

            <div className="mt-3 text-xs text-gray-700 min-h-[40px]">
              {current ? (
                <div>
                  <div>Catalog {current.pk_catalog_id}{current.name ? `: ${current.name}` : ''}</div>
                  <div>{current.species || '—'} · {current.gender || '—'} · {current.age_class || '—'}</div>
                </div>
              ) : (
                <div className="text-gray-500">{loading ? 'Loading…' : 'No records.'}</div>
              )}
            </div>

            <div className="mt-auto pt-3 border-t flex items-center justify-between">
              <div className="flex gap-2">
                <button type="button" className="px-3 py-1 rounded border text-sm disabled:opacity-50" onClick={() => setIdx((i) => Math.max(0, i - 1))} disabled={idx <= 0 || !filtered.length}>Prev</button>
                <button type="button" className="px-3 py-1 rounded border text-sm disabled:opacity-50" onClick={() => setIdx((i) => Math.min(filtered.length - 1, i + 1))} disabled={idx >= filtered.length - 1 || !filtered.length}>Next</button>
              </div>
              <div className="flex gap-2">
                <button type="button" className="px-3 py-1 rounded bg-blue-600 text-white text-sm disabled:opacity-50" disabled={!current} onClick={() => { if (current && onChoose) onChoose(current.pk_catalog_id); safeClose(); }}>This Matches</button>
                <button type="button" className="px-3 py-1 rounded border text-sm" onClick={() => { if (onNoMatch) onNoMatch(); safeClose(); }}>No Matches Found</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MatchModal;
